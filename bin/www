#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("e:server");
var http = require("http");
const uuid = require("uuid");
const lodash = require("lodash");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// 添加ws服务
const io = require("socket.io")(server, { cors: true });
let connectionList = [];

const CLIENT_RTC_EVENT = "CLIENT_RTC_EVENT";
const SERVER_RTC_EVENT = "SERVER_RTC_EVENT";

const CLIENT_USER_EVENT = "CLIENT_USER_EVENT";
const SERVER_USER_EVENT = "SERVER_USER_EVENT";

const CLIENT_USER_EVENT_LOGIN = "CLIENT_USER_EVENT_LOGIN";
const SERVER_USER_EVENT_UPDATE_USERS = "SERVER_USER_EVENT_UPDATE_USERS";

const SIGNALING_CANDIDATE = "SIGNALING_CANDIDATE";
const SERVER_USER_EVENT_SET_USERNAME = "SERVER_USER_EVENT_SET_USERNAME";

function getOnlineUser() {
  return connectionList
    .filter((item) => {
      return item.userName !== "";
    })
    .map((item) => {
      return {
        userName: item.userName,
      };
    });
}

function setUserName(connection, userName) {
  connectionList.forEach((item) => {
    if (item.connection.id === connection.id) {
      item.userName = userName;
    }
  });
}

function updateUsers(connection, from = connection.user.userName) {
  console.log("当前用户updateUsers：" + from);
  connection.emit(SERVER_USER_EVENT, {
    type: SERVER_USER_EVENT_UPDATE_USERS,
    from: from,
    payload: getOnlineUser(),
  });
}

io.on("connection", function (connection) {
  const userName = uuid.v4();
  console.log("用户进入：" + userName);
  connection.user = { userName: userName };
  connectionList.unshift({
    connection: connection,
    userName: userName,
  });
  connection.emit(SERVER_USER_EVENT, {
    type: SERVER_USER_EVENT_SET_USERNAME,
    payload: { userName: userName },
  });
  // 连接上的用户，推送在线用户列表
  // connection.emit(SERVER_USER_EVENT, { type: SERVER_USER_EVENT_UPDATE_USERS, payload: getOnlineUser()});
  // updateUsers(connection);

  connection.on(CLIENT_USER_EVENT, function (jsonString) {
    const msg = JSON.parse(jsonString);
    const { type, payload } = msg;

    if (type === CLIENT_USER_EVENT_LOGIN) {
      // setUserName(connection, payload.loginName);
      connectionList.forEach((item) => {
        // item.connection.emit(SERVER_USER_EVENT, { type: SERVER_USER_EVENT_UPDATE_USERS, payload: getOnlineUser()});
        updateUsers(item.connection, payload);
      });
    }
  });

  connection.on(CLIENT_RTC_EVENT, function (jsonString) {
    const msg = JSON.parse(jsonString);
    const { payload, type } = msg;
    const { from, target } = payload;

    // if (
    //   type == SIGNALING_CANDIDATE &&
    //   payload.candidate.candidate.indexOf("typ relay") > -1
    // ) {
    //   return console.log(`中断 candidate：${from} -> ${target} typ relay`);
    // }

    const targetConn = connectionList.find((item) => {
      return item.userName === target;
    });
    if (targetConn) {
      targetConn.connection.emit(SERVER_RTC_EVENT, msg);
    }
  });

  connection.on("disconnect", function () {
    console.log("用户离开：" + connection.user.userName);
    connectionList = connectionList.filter((item) => {
      return item.connection.id !== connection.id;
    });
    connectionList.forEach((item) => {
      // item.connection.emit(SERVER_USER_EVENT, { type: SERVER_USER_EVENT_UPDATE_USERS, payload: getOnlineUser()});
      updateUsers(item.connection);
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
